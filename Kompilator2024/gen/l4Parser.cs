//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Rafa³/Sem5/Jftt/Kompilator/Kompilator2024/Kompilator2024/l4.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class l4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, WS=20, WHITESPACE=21, PIDENTIFIER=22, PROCEDURE=23, 
		IS=24, BEGIN=25, END=26, PROGRAM=27, IF=28, WHILE=29, FOR=30, REPEAT=31, 
		THEN=32, ELSE=33, ENDIF=34, DO=35, ENDWHILE=36, UNTIL=37, FROM=38, ENDFOR=39, 
		TO=40, DOWNTO=41, READ=42, WRITE=43, T=44, NUM=45;
	public const int
		RULE_program_all = 0, RULE_procedures = 1, RULE_main = 2, RULE_commands = 3, 
		RULE_command = 4, RULE_expression = 5, RULE_proc_head = 6, RULE_proc_call = 7, 
		RULE_declarations = 8, RULE_args_decl = 9, RULE_args = 10, RULE_condition = 11, 
		RULE_value = 12, RULE_identifier = 13;
	public static readonly string[] ruleNames = {
		"program_all", "procedures", "main", "commands", "command", "expression", 
		"proc_head", "proc_call", "declarations", "args_decl", "args", "condition", 
		"value", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", 
		"','", "'['", "':'", "']'", "'='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		null, null, null, "'PROCEDURE'", "'IS'", "'BEGIN'", "'END'", "'PROGRAM'", 
		"'IF'", "'WHILE'", "'FOR'", "'REPEAT'", "'THEN'", "'ELSE'", "'ENDIF'", 
		"'DO'", "'ENDWHILE'", "'UNTIL'", "'FROM'", "'ENDFOR'", "'TO'", "'DOWNTO'", 
		"'READ'", "'WRITE'", "'T'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "WS", "WHITESPACE", "PIDENTIFIER", 
		"PROCEDURE", "IS", "BEGIN", "END", "PROGRAM", "IF", "WHILE", "FOR", "REPEAT", 
		"THEN", "ELSE", "ENDIF", "DO", "ENDWHILE", "UNTIL", "FROM", "ENDFOR", 
		"TO", "DOWNTO", "READ", "WRITE", "T", "NUM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "l4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static l4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public l4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public l4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Program_allContext : ParserRuleContext {
		public Program_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_all; } }
	 
		public Program_allContext() { }
		public virtual void CopyFrom(Program_allContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WithProceduresContext : Program_allContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProceduresContext procedures() {
			return GetRuleContext<ProceduresContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public WithProceduresContext(Program_allContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterWithProcedures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitWithProcedures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithProcedures(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoPreoceduresContext : Program_allContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public NoPreoceduresContext(Program_allContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterNoPreocedures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitNoPreocedures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPreocedures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Program_allContext program_all() {
		Program_allContext _localctx = new Program_allContext(Context, State);
		EnterRule(_localctx, 0, RULE_program_all);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				_localctx = new WithProceduresContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				procedures(0);
				State = 29;
				main();
				}
				break;
			case PROGRAM:
				_localctx = new NoPreoceduresContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				main();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(l4Parser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_headContext proc_head() {
			return GetRuleContext<Proc_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(l4Parser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(l4Parser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(l4Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProceduresContext procedures() {
			return GetRuleContext<ProceduresContext>(0);
		}
		public ProceduresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterProcedures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitProcedures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduresContext procedures() {
		return procedures(0);
	}

	private ProceduresContext procedures(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ProceduresContext _localctx = new ProceduresContext(Context, _parentState);
		ProceduresContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_procedures, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 35;
				Match(PROCEDURE);
				State = 36;
				proc_head();
				State = 37;
				Match(IS);
				State = 38;
				declarations(0);
				State = 39;
				Match(BEGIN);
				State = 40;
				commands(0);
				State = 41;
				Match(END);
				}
				break;
			case 2:
				{
				State = 43;
				Match(PROCEDURE);
				State = 44;
				proc_head();
				State = 45;
				Match(IS);
				State = 46;
				Match(BEGIN);
				State = 47;
				commands(0);
				State = 48;
				Match(END);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 71;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 69;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new ProceduresContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_procedures);
						State = 52;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 53;
						Match(PROCEDURE);
						State = 54;
						proc_head();
						State = 55;
						Match(IS);
						State = 56;
						declarations(0);
						State = 57;
						Match(BEGIN);
						State = 58;
						commands(0);
						State = 59;
						Match(END);
						}
						break;
					case 2:
						{
						_localctx = new ProceduresContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_procedures);
						State = 61;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 62;
						Match(PROCEDURE);
						State = 63;
						proc_head();
						State = 64;
						Match(IS);
						State = 65;
						Match(BEGIN);
						State = 66;
						commands(0);
						State = 67;
						Match(END);
						}
						break;
					}
					} 
				}
				State = 73;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	 
		public MainContext() { }
		public virtual void CopyFrom(MainContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoDeclareContext : MainContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(l4Parser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(l4Parser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(l4Parser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(l4Parser.END, 0); }
		public NoDeclareContext(MainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterNoDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitNoDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareContext : MainContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(l4Parser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(l4Parser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(l4Parser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(l4Parser.END, 0); }
		public DeclareContext(MainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 4, RULE_main);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new DeclareContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				Match(PROGRAM);
				State = 75;
				Match(IS);
				State = 76;
				declarations(0);
				State = 77;
				Match(BEGIN);
				State = 78;
				commands(0);
				State = 79;
				Match(END);
				}
				break;
			case 2:
				_localctx = new NoDeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				Match(PROGRAM);
				State = 82;
				Match(IS);
				State = 83;
				Match(BEGIN);
				State = 84;
				commands(0);
				State = 85;
				Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		return commands(0);
	}

	private CommandsContext commands(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CommandsContext _localctx = new CommandsContext(Context, _parentState);
		CommandsContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_commands, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 90;
			command();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 96;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CommandsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_commands);
					State = 92;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 93;
					command();
					}
					} 
				}
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(l4Parser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReadContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(l4Parser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public WriteContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_callContext proc_call() {
			return GetRuleContext<Proc_callContext>(0);
		}
		public CallContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseContext : CommandContext {
		public CommandsContext ifblock;
		public CommandsContext elseblock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(l4Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(l4Parser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(l4Parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(l4Parser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext[] commands() {
			return GetRuleContexts<CommandsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands(int i) {
			return GetRuleContext<CommandsContext>(i);
		}
		public IfElseContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(l4Parser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(l4Parser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RepeatContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForUpContext : CommandContext {
		public ValueContext v1;
		public ValueContext v2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(l4Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(l4Parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(l4Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(l4Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFOR() { return GetToken(l4Parser.ENDFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ForUpContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterForUp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitForUp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(l4Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(l4Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDWHILE() { return GetToken(l4Parser.ENDWHILE, 0); }
		public WhileContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(l4Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(l4Parser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(l4Parser.ENDIF, 0); }
		public IfContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForDownContext : CommandContext {
		public ValueContext v1;
		public ValueContext v2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(l4Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(l4Parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNTO() { return GetToken(l4Parser.DOWNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(l4Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFOR() { return GetToken(l4Parser.ENDFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ForDownContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterForDown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitForDown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_command);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				identifier();
				State = 100;
				Match(T__0);
				State = 101;
				expression();
				State = 102;
				Match(T__1);
				}
				break;
			case 2:
				_localctx = new IfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				Match(IF);
				State = 105;
				condition();
				State = 106;
				Match(THEN);
				State = 107;
				commands(0);
				State = 108;
				Match(ENDIF);
				}
				break;
			case 3:
				_localctx = new IfElseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				Match(IF);
				State = 111;
				condition();
				State = 112;
				Match(THEN);
				State = 113;
				((IfElseContext)_localctx).ifblock = commands(0);
				State = 114;
				Match(ELSE);
				State = 115;
				((IfElseContext)_localctx).elseblock = commands(0);
				State = 116;
				Match(ENDIF);
				}
				break;
			case 4:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 118;
				Match(WHILE);
				State = 119;
				condition();
				State = 120;
				Match(DO);
				State = 121;
				commands(0);
				State = 122;
				Match(ENDWHILE);
				}
				break;
			case 5:
				_localctx = new RepeatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 124;
				Match(REPEAT);
				State = 125;
				commands(0);
				State = 126;
				Match(UNTIL);
				State = 127;
				condition();
				State = 128;
				Match(T__1);
				}
				break;
			case 6:
				_localctx = new ForUpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 130;
				Match(FOR);
				State = 131;
				Match(PIDENTIFIER);
				State = 132;
				Match(FROM);
				State = 133;
				((ForUpContext)_localctx).v1 = value();
				State = 134;
				Match(TO);
				State = 135;
				((ForUpContext)_localctx).v2 = value();
				State = 136;
				Match(DO);
				State = 137;
				commands(0);
				State = 138;
				Match(ENDFOR);
				}
				break;
			case 7:
				_localctx = new ForDownContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 140;
				Match(FOR);
				State = 141;
				Match(PIDENTIFIER);
				State = 142;
				Match(FROM);
				State = 143;
				((ForDownContext)_localctx).v1 = value();
				State = 144;
				Match(DOWNTO);
				State = 145;
				((ForDownContext)_localctx).v2 = value();
				State = 146;
				Match(DO);
				State = 147;
				commands(0);
				State = 148;
				Match(ENDFOR);
				}
				break;
			case 8:
				_localctx = new CallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 150;
				proc_call();
				State = 151;
				Match(T__1);
				}
				break;
			case 9:
				_localctx = new ReadContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 153;
				Match(READ);
				State = 154;
				identifier();
				State = 155;
				Match(T__1);
				}
				break;
			case 10:
				_localctx = new WriteContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 157;
				Match(WRITE);
				State = 158;
				value();
				State = 159;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExpressionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivContext : ExpressionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public DivContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : ExpressionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public SubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModContext : ExpressionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulContext : ExpressionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public MulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EvalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public EvalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new AddContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				((AddContext)_localctx).left = value();
				State = 164;
				Match(T__2);
				State = 165;
				((AddContext)_localctx).right = value();
				}
				break;
			case 2:
				_localctx = new SubContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				((SubContext)_localctx).left = value();
				State = 168;
				Match(T__3);
				State = 169;
				((SubContext)_localctx).right = value();
				}
				break;
			case 3:
				_localctx = new MulContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				((MulContext)_localctx).left = value();
				State = 172;
				Match(T__4);
				State = 173;
				((MulContext)_localctx).right = value();
				}
				break;
			case 4:
				_localctx = new DivContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 175;
				((DivContext)_localctx).left = value();
				State = 176;
				Match(T__5);
				State = 177;
				((DivContext)_localctx).right = value();
				}
				break;
			case 5:
				_localctx = new ModContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 179;
				((ModContext)_localctx).left = value();
				State = 180;
				Match(T__6);
				State = 181;
				((ModContext)_localctx).right = value();
				}
				break;
			case 6:
				_localctx = new EvalContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 183;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Args_declContext args_decl() {
			return GetRuleContext<Args_declContext>(0);
		}
		public Proc_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterProc_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitProc_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proc_headContext proc_head() {
		Proc_headContext _localctx = new Proc_headContext(Context, State);
		EnterRule(_localctx, 12, RULE_proc_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(PIDENTIFIER);
			State = 187;
			Match(T__7);
			State = 188;
			args_decl(0);
			State = 189;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public Proc_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterProc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitProc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proc_callContext proc_call() {
		Proc_callContext _localctx = new Proc_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_proc_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(PIDENTIFIER);
			State = 192;
			Match(T__7);
			State = 193;
			args(0);
			State = 194;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PutTable2Context : DeclarationsContext {
		public IToken left;
		public IToken right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(l4Parser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(l4Parser.NUM, i);
		}
		public PutTable2Context(DeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterPutTable2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitPutTable2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutTable2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PutTable1Context : DeclarationsContext {
		public IToken left;
		public IToken right;
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(l4Parser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(l4Parser.NUM, i);
		}
		public PutTable1Context(DeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterPutTable1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitPutTable1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutTable1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PutSymbol1Context : DeclarationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		public PutSymbol1Context(DeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterPutSymbol1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitPutSymbol1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutSymbol1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PutSymbol2Context : DeclarationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		public PutSymbol2Context(DeclarationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterPutSymbol2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitPutSymbol2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutSymbol2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		return declarations(0);
	}

	private DeclarationsContext declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationsContext _localctx = new DeclarationsContext(Context, _parentState);
		DeclarationsContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new PutSymbol2Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 197;
				Match(PIDENTIFIER);
				}
				break;
			case 2:
				{
				_localctx = new PutTable2Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				Match(PIDENTIFIER);
				State = 199;
				Match(T__10);
				State = 200;
				((PutTable2Context)_localctx).left = Match(NUM);
				State = 201;
				Match(T__11);
				State = 202;
				((PutTable2Context)_localctx).right = Match(NUM);
				State = 203;
				Match(T__12);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 217;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new PutSymbol1Context(new DeclarationsContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarations);
						State = 206;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 207;
						Match(T__9);
						State = 208;
						Match(PIDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new PutTable1Context(new DeclarationsContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarations);
						State = 209;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 210;
						Match(T__9);
						State = 211;
						Match(PIDENTIFIER);
						State = 212;
						Match(T__10);
						State = 213;
						((PutTable1Context)_localctx).left = Match(NUM);
						State = 214;
						Match(T__11);
						State = 215;
						((PutTable1Context)_localctx).right = Match(NUM);
						State = 216;
						Match(T__12);
						}
						break;
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Args_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T() { return GetToken(l4Parser.T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Args_declContext args_decl() {
			return GetRuleContext<Args_declContext>(0);
		}
		public Args_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterArgs_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitArgs_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Args_declContext args_decl() {
		return args_decl(0);
	}

	private Args_declContext args_decl(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Args_declContext _localctx = new Args_declContext(Context, _parentState);
		Args_declContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_args_decl, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PIDENTIFIER:
				{
				State = 223;
				Match(PIDENTIFIER);
				}
				break;
			case T:
				{
				State = 224;
				Match(T);
				State = 225;
				Match(PIDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 235;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new Args_declContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_args_decl);
						State = 228;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 229;
						Match(T__9);
						State = 230;
						Match(PIDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new Args_declContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_args_decl);
						State = 231;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 232;
						Match(T__9);
						State = 233;
						Match(T);
						State = 234;
						Match(PIDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		return args(0);
	}

	private ArgsContext args(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgsContext _localctx = new ArgsContext(Context, _parentState);
		ArgsContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_args, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 241;
			Match(PIDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_args);
					State = 243;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 244;
					Match(T__9);
					State = 245;
					Match(PIDENTIFIER);
					}
					} 
				}
				State = 250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GeqContext : ConditionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public GeqContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterGeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitGeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeContext : ConditionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public LeContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterLe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitLe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeqContext : ConditionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public LeqContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterLeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitLeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NeqContext : ConditionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public NeqContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqContext : ConditionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public EqContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeContext : ConditionContext {
		public ValueContext left;
		public ValueContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public GeContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterGe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitGe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new EqContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				((EqContext)_localctx).left = value();
				State = 252;
				Match(T__13);
				State = 253;
				((EqContext)_localctx).right = value();
				}
				break;
			case 2:
				_localctx = new NeqContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				((NeqContext)_localctx).left = value();
				State = 256;
				Match(T__14);
				State = 257;
				((NeqContext)_localctx).right = value();
				}
				break;
			case 3:
				_localctx = new GeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 259;
				((GeContext)_localctx).left = value();
				State = 260;
				Match(T__15);
				State = 261;
				((GeContext)_localctx).right = value();
				}
				break;
			case 4:
				_localctx = new LeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 263;
				((LeContext)_localctx).left = value();
				State = 264;
				Match(T__16);
				State = 265;
				((LeContext)_localctx).right = value();
				}
				break;
			case 5:
				_localctx = new GeqContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 267;
				((GeqContext)_localctx).left = value();
				State = 268;
				Match(T__17);
				State = 269;
				((GeqContext)_localctx).right = value();
				}
				break;
			case 6:
				_localctx = new LeqContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 271;
				((LeqContext)_localctx).left = value();
				State = 272;
				Match(T__18);
				State = 273;
				((LeqContext)_localctx).right = value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(l4Parser.NUM, 0); }
		public NumContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new NumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				Match(NUM);
				}
				break;
			case PIDENTIFIER:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GetArrayByPidContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIDENTIFIER() { return GetTokens(l4Parser.PIDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER(int i) {
			return GetToken(l4Parser.PIDENTIFIER, i);
		}
		public GetArrayByPidContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterGetArrayByPid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitGetArrayByPid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetArrayByPid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetArrayByNumContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(l4Parser.NUM, 0); }
		public GetArrayByNumContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterGetArrayByNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitGetArrayByNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetArrayByNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetPIDENTIFIERContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIDENTIFIER() { return GetToken(l4Parser.PIDENTIFIER, 0); }
		public GetPIDENTIFIERContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.EnterGetPIDENTIFIER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Il4Listener typedListener = listener as Il4Listener;
			if (typedListener != null) typedListener.ExitGetPIDENTIFIER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Il4Visitor<TResult> typedVisitor = visitor as Il4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetPIDENTIFIER(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_identifier);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new GetPIDENTIFIERContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(PIDENTIFIER);
				}
				break;
			case 2:
				_localctx = new GetArrayByPidContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(PIDENTIFIER);
				State = 283;
				Match(T__10);
				State = 284;
				Match(PIDENTIFIER);
				State = 285;
				Match(T__12);
				}
				break;
			case 3:
				_localctx = new GetArrayByNumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				Match(PIDENTIFIER);
				State = 287;
				Match(T__10);
				State = 288;
				Match(NUM);
				State = 289;
				Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return procedures_sempred((ProceduresContext)_localctx, predIndex);
		case 3: return commands_sempred((CommandsContext)_localctx, predIndex);
		case 8: return declarations_sempred((DeclarationsContext)_localctx, predIndex);
		case 9: return args_decl_sempred((Args_declContext)_localctx, predIndex);
		case 10: return args_sempred((ArgsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool procedures_sempred(ProceduresContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool commands_sempred(CommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool declarations_sempred(DeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}
	private bool args_decl_sempred(Args_declContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		}
		return true;
	}
	private bool args_sempred(ArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,45,293,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,0,3,0,33,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,3,1,51,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,5,1,70,8,1,10,1,12,1,73,9,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,88,8,2,1,3,1,3,1,3,1,3,1,3,5,3,95,8,3,
		10,3,12,3,98,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,162,8,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,3,5,185,8,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,3,8,205,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,5,8,218,8,8,10,8,12,8,221,9,8,1,9,1,9,1,9,1,9,3,9,227,8,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,236,8,9,10,9,12,9,239,9,9,1,10,1,10,1,10,
		1,10,1,10,1,10,5,10,247,8,10,10,10,12,10,250,9,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,3,11,276,8,11,1,12,1,12,3,12,280,8,12,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,291,8,13,1,13,0,5,2,6,
		16,18,20,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,0,313,0,32,1,0,0,0,
		2,50,1,0,0,0,4,87,1,0,0,0,6,89,1,0,0,0,8,161,1,0,0,0,10,184,1,0,0,0,12,
		186,1,0,0,0,14,191,1,0,0,0,16,204,1,0,0,0,18,226,1,0,0,0,20,240,1,0,0,
		0,22,275,1,0,0,0,24,279,1,0,0,0,26,290,1,0,0,0,28,29,3,2,1,0,29,30,3,4,
		2,0,30,33,1,0,0,0,31,33,3,4,2,0,32,28,1,0,0,0,32,31,1,0,0,0,33,1,1,0,0,
		0,34,35,6,1,-1,0,35,36,5,23,0,0,36,37,3,12,6,0,37,38,5,24,0,0,38,39,3,
		16,8,0,39,40,5,25,0,0,40,41,3,6,3,0,41,42,5,26,0,0,42,51,1,0,0,0,43,44,
		5,23,0,0,44,45,3,12,6,0,45,46,5,24,0,0,46,47,5,25,0,0,47,48,3,6,3,0,48,
		49,5,26,0,0,49,51,1,0,0,0,50,34,1,0,0,0,50,43,1,0,0,0,51,71,1,0,0,0,52,
		53,10,4,0,0,53,54,5,23,0,0,54,55,3,12,6,0,55,56,5,24,0,0,56,57,3,16,8,
		0,57,58,5,25,0,0,58,59,3,6,3,0,59,60,5,26,0,0,60,70,1,0,0,0,61,62,10,3,
		0,0,62,63,5,23,0,0,63,64,3,12,6,0,64,65,5,24,0,0,65,66,5,25,0,0,66,67,
		3,6,3,0,67,68,5,26,0,0,68,70,1,0,0,0,69,52,1,0,0,0,69,61,1,0,0,0,70,73,
		1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,3,1,0,0,0,73,71,1,0,0,0,74,75,5,
		27,0,0,75,76,5,24,0,0,76,77,3,16,8,0,77,78,5,25,0,0,78,79,3,6,3,0,79,80,
		5,26,0,0,80,88,1,0,0,0,81,82,5,27,0,0,82,83,5,24,0,0,83,84,5,25,0,0,84,
		85,3,6,3,0,85,86,5,26,0,0,86,88,1,0,0,0,87,74,1,0,0,0,87,81,1,0,0,0,88,
		5,1,0,0,0,89,90,6,3,-1,0,90,91,3,8,4,0,91,96,1,0,0,0,92,93,10,2,0,0,93,
		95,3,8,4,0,94,92,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,
		7,1,0,0,0,98,96,1,0,0,0,99,100,3,26,13,0,100,101,5,1,0,0,101,102,3,10,
		5,0,102,103,5,2,0,0,103,162,1,0,0,0,104,105,5,28,0,0,105,106,3,22,11,0,
		106,107,5,32,0,0,107,108,3,6,3,0,108,109,5,34,0,0,109,162,1,0,0,0,110,
		111,5,28,0,0,111,112,3,22,11,0,112,113,5,32,0,0,113,114,3,6,3,0,114,115,
		5,33,0,0,115,116,3,6,3,0,116,117,5,34,0,0,117,162,1,0,0,0,118,119,5,29,
		0,0,119,120,3,22,11,0,120,121,5,35,0,0,121,122,3,6,3,0,122,123,5,36,0,
		0,123,162,1,0,0,0,124,125,5,31,0,0,125,126,3,6,3,0,126,127,5,37,0,0,127,
		128,3,22,11,0,128,129,5,2,0,0,129,162,1,0,0,0,130,131,5,30,0,0,131,132,
		5,22,0,0,132,133,5,38,0,0,133,134,3,24,12,0,134,135,5,40,0,0,135,136,3,
		24,12,0,136,137,5,35,0,0,137,138,3,6,3,0,138,139,5,39,0,0,139,162,1,0,
		0,0,140,141,5,30,0,0,141,142,5,22,0,0,142,143,5,38,0,0,143,144,3,24,12,
		0,144,145,5,41,0,0,145,146,3,24,12,0,146,147,5,35,0,0,147,148,3,6,3,0,
		148,149,5,39,0,0,149,162,1,0,0,0,150,151,3,14,7,0,151,152,5,2,0,0,152,
		162,1,0,0,0,153,154,5,42,0,0,154,155,3,26,13,0,155,156,5,2,0,0,156,162,
		1,0,0,0,157,158,5,43,0,0,158,159,3,24,12,0,159,160,5,2,0,0,160,162,1,0,
		0,0,161,99,1,0,0,0,161,104,1,0,0,0,161,110,1,0,0,0,161,118,1,0,0,0,161,
		124,1,0,0,0,161,130,1,0,0,0,161,140,1,0,0,0,161,150,1,0,0,0,161,153,1,
		0,0,0,161,157,1,0,0,0,162,9,1,0,0,0,163,164,3,24,12,0,164,165,5,3,0,0,
		165,166,3,24,12,0,166,185,1,0,0,0,167,168,3,24,12,0,168,169,5,4,0,0,169,
		170,3,24,12,0,170,185,1,0,0,0,171,172,3,24,12,0,172,173,5,5,0,0,173,174,
		3,24,12,0,174,185,1,0,0,0,175,176,3,24,12,0,176,177,5,6,0,0,177,178,3,
		24,12,0,178,185,1,0,0,0,179,180,3,24,12,0,180,181,5,7,0,0,181,182,3,24,
		12,0,182,185,1,0,0,0,183,185,3,24,12,0,184,163,1,0,0,0,184,167,1,0,0,0,
		184,171,1,0,0,0,184,175,1,0,0,0,184,179,1,0,0,0,184,183,1,0,0,0,185,11,
		1,0,0,0,186,187,5,22,0,0,187,188,5,8,0,0,188,189,3,18,9,0,189,190,5,9,
		0,0,190,13,1,0,0,0,191,192,5,22,0,0,192,193,5,8,0,0,193,194,3,20,10,0,
		194,195,5,9,0,0,195,15,1,0,0,0,196,197,6,8,-1,0,197,205,5,22,0,0,198,199,
		5,22,0,0,199,200,5,11,0,0,200,201,5,45,0,0,201,202,5,12,0,0,202,203,5,
		45,0,0,203,205,5,13,0,0,204,196,1,0,0,0,204,198,1,0,0,0,205,219,1,0,0,
		0,206,207,10,4,0,0,207,208,5,10,0,0,208,218,5,22,0,0,209,210,10,3,0,0,
		210,211,5,10,0,0,211,212,5,22,0,0,212,213,5,11,0,0,213,214,5,45,0,0,214,
		215,5,12,0,0,215,216,5,45,0,0,216,218,5,13,0,0,217,206,1,0,0,0,217,209,
		1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,17,1,0,0,0,
		221,219,1,0,0,0,222,223,6,9,-1,0,223,227,5,22,0,0,224,225,5,44,0,0,225,
		227,5,22,0,0,226,222,1,0,0,0,226,224,1,0,0,0,227,237,1,0,0,0,228,229,10,
		4,0,0,229,230,5,10,0,0,230,236,5,22,0,0,231,232,10,3,0,0,232,233,5,10,
		0,0,233,234,5,44,0,0,234,236,5,22,0,0,235,228,1,0,0,0,235,231,1,0,0,0,
		236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,19,1,0,0,0,239,237,
		1,0,0,0,240,241,6,10,-1,0,241,242,5,22,0,0,242,248,1,0,0,0,243,244,10,
		2,0,0,244,245,5,10,0,0,245,247,5,22,0,0,246,243,1,0,0,0,247,250,1,0,0,
		0,248,246,1,0,0,0,248,249,1,0,0,0,249,21,1,0,0,0,250,248,1,0,0,0,251,252,
		3,24,12,0,252,253,5,14,0,0,253,254,3,24,12,0,254,276,1,0,0,0,255,256,3,
		24,12,0,256,257,5,15,0,0,257,258,3,24,12,0,258,276,1,0,0,0,259,260,3,24,
		12,0,260,261,5,16,0,0,261,262,3,24,12,0,262,276,1,0,0,0,263,264,3,24,12,
		0,264,265,5,17,0,0,265,266,3,24,12,0,266,276,1,0,0,0,267,268,3,24,12,0,
		268,269,5,18,0,0,269,270,3,24,12,0,270,276,1,0,0,0,271,272,3,24,12,0,272,
		273,5,19,0,0,273,274,3,24,12,0,274,276,1,0,0,0,275,251,1,0,0,0,275,255,
		1,0,0,0,275,259,1,0,0,0,275,263,1,0,0,0,275,267,1,0,0,0,275,271,1,0,0,
		0,276,23,1,0,0,0,277,280,5,45,0,0,278,280,3,26,13,0,279,277,1,0,0,0,279,
		278,1,0,0,0,280,25,1,0,0,0,281,291,5,22,0,0,282,283,5,22,0,0,283,284,5,
		11,0,0,284,285,5,22,0,0,285,291,5,13,0,0,286,287,5,22,0,0,287,288,5,11,
		0,0,288,289,5,45,0,0,289,291,5,13,0,0,290,281,1,0,0,0,290,282,1,0,0,0,
		290,286,1,0,0,0,291,27,1,0,0,0,18,32,50,69,71,87,96,161,184,204,217,219,
		226,235,237,248,275,279,290
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
