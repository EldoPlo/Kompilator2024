//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Rafa³/Sem5/Jftt/Kompilator/Kompilator2024/Kompilator2024/l4.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="Il4Listener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class l4BaseListener : Il4Listener {
	/// <summary>
	/// Enter a parse tree produced by the <c>WithProcedures</c>
	/// labeled alternative in <see cref="l4Parser.program_all"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithProcedures([NotNull] l4Parser.WithProceduresContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WithProcedures</c>
	/// labeled alternative in <see cref="l4Parser.program_all"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithProcedures([NotNull] l4Parser.WithProceduresContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NoPreocedures</c>
	/// labeled alternative in <see cref="l4Parser.program_all"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNoPreocedures([NotNull] l4Parser.NoPreoceduresContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NoPreocedures</c>
	/// labeled alternative in <see cref="l4Parser.program_all"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNoPreocedures([NotNull] l4Parser.NoPreoceduresContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="l4Parser.procedures"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcedures([NotNull] l4Parser.ProceduresContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="l4Parser.procedures"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcedures([NotNull] l4Parser.ProceduresContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Declare</c>
	/// labeled alternative in <see cref="l4Parser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclare([NotNull] l4Parser.DeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Declare</c>
	/// labeled alternative in <see cref="l4Parser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclare([NotNull] l4Parser.DeclareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NoDeclare</c>
	/// labeled alternative in <see cref="l4Parser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNoDeclare([NotNull] l4Parser.NoDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NoDeclare</c>
	/// labeled alternative in <see cref="l4Parser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNoDeclare([NotNull] l4Parser.NoDeclareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="l4Parser.commands"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCommands([NotNull] l4Parser.CommandsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="l4Parser.commands"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCommands([NotNull] l4Parser.CommandsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign([NotNull] l4Parser.AssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign([NotNull] l4Parser.AssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>If</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf([NotNull] l4Parser.IfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>If</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf([NotNull] l4Parser.IfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfElse</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElse([NotNull] l4Parser.IfElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfElse</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElse([NotNull] l4Parser.IfElseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>While</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile([NotNull] l4Parser.WhileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>While</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile([NotNull] l4Parser.WhileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Repeat</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeat([NotNull] l4Parser.RepeatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Repeat</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeat([NotNull] l4Parser.RepeatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForUp</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForUp([NotNull] l4Parser.ForUpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForUp</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForUp([NotNull] l4Parser.ForUpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForDown</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForDown([NotNull] l4Parser.ForDownContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForDown</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForDown([NotNull] l4Parser.ForDownContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Call</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] l4Parser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Call</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] l4Parser.CallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Read</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRead([NotNull] l4Parser.ReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Read</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRead([NotNull] l4Parser.ReadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Write</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWrite([NotNull] l4Parser.WriteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Write</c>
	/// labeled alternative in <see cref="l4Parser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWrite([NotNull] l4Parser.WriteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="l4Parser.proc_head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProc_head([NotNull] l4Parser.Proc_headContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="l4Parser.proc_head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProc_head([NotNull] l4Parser.Proc_headContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="l4Parser.proc_call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProc_call([NotNull] l4Parser.Proc_callContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="l4Parser.proc_call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProc_call([NotNull] l4Parser.Proc_callContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PutTable2</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPutTable2([NotNull] l4Parser.PutTable2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PutTable2</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPutTable2([NotNull] l4Parser.PutTable2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PutTable1</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPutTable1([NotNull] l4Parser.PutTable1Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PutTable1</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPutTable1([NotNull] l4Parser.PutTable1Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PutSymbol1</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPutSymbol1([NotNull] l4Parser.PutSymbol1Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PutSymbol1</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPutSymbol1([NotNull] l4Parser.PutSymbol1Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PutSymbol2</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPutSymbol2([NotNull] l4Parser.PutSymbol2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PutSymbol2</c>
	/// labeled alternative in <see cref="l4Parser.declarations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPutSymbol2([NotNull] l4Parser.PutSymbol2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="l4Parser.args_decl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgs_decl([NotNull] l4Parser.Args_declContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="l4Parser.args_decl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgs_decl([NotNull] l4Parser.Args_declContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="l4Parser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgs([NotNull] l4Parser.ArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="l4Parser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgs([NotNull] l4Parser.ArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdd([NotNull] l4Parser.AddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdd([NotNull] l4Parser.AddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Sub</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSub([NotNull] l4Parser.SubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Sub</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSub([NotNull] l4Parser.SubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMul([NotNull] l4Parser.MulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMul([NotNull] l4Parser.MulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Div</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDiv([NotNull] l4Parser.DivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Div</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDiv([NotNull] l4Parser.DivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Mod</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMod([NotNull] l4Parser.ModContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Mod</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMod([NotNull] l4Parser.ModContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Eval</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEval([NotNull] l4Parser.EvalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Eval</c>
	/// labeled alternative in <see cref="l4Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEval([NotNull] l4Parser.EvalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Eq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEq([NotNull] l4Parser.EqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Eq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEq([NotNull] l4Parser.EqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Neq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNeq([NotNull] l4Parser.NeqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Neq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNeq([NotNull] l4Parser.NeqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Ge</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGe([NotNull] l4Parser.GeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Ge</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGe([NotNull] l4Parser.GeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Le</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLe([NotNull] l4Parser.LeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Le</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLe([NotNull] l4Parser.LeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Geq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeq([NotNull] l4Parser.GeqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Geq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeq([NotNull] l4Parser.GeqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Leq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLeq([NotNull] l4Parser.LeqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Leq</c>
	/// labeled alternative in <see cref="l4Parser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLeq([NotNull] l4Parser.LeqContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Num</c>
	/// labeled alternative in <see cref="l4Parser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNum([NotNull] l4Parser.NumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Num</c>
	/// labeled alternative in <see cref="l4Parser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNum([NotNull] l4Parser.NumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Id</c>
	/// labeled alternative in <see cref="l4Parser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterId([NotNull] l4Parser.IdContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Id</c>
	/// labeled alternative in <see cref="l4Parser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitId([NotNull] l4Parser.IdContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GetPIDENTIFIER</c>
	/// labeled alternative in <see cref="l4Parser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetPIDENTIFIER([NotNull] l4Parser.GetPIDENTIFIERContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GetPIDENTIFIER</c>
	/// labeled alternative in <see cref="l4Parser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetPIDENTIFIER([NotNull] l4Parser.GetPIDENTIFIERContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GetArrayByPid</c>
	/// labeled alternative in <see cref="l4Parser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetArrayByPid([NotNull] l4Parser.GetArrayByPidContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GetArrayByPid</c>
	/// labeled alternative in <see cref="l4Parser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetArrayByPid([NotNull] l4Parser.GetArrayByPidContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GetArrayByNum</c>
	/// labeled alternative in <see cref="l4Parser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetArrayByNum([NotNull] l4Parser.GetArrayByNumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GetArrayByNum</c>
	/// labeled alternative in <see cref="l4Parser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetArrayByNum([NotNull] l4Parser.GetArrayByNumContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
